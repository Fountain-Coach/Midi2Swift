import Foundation

struct CLI {
    var inPath: String = "spec/matrix.json"
    var outPath: String = "swift/Midi2Swift/Sources"
    static func parse() -> CLI {
        var cli = CLI()
        var it = CommandLine.arguments.dropFirst().makeIterator()
        while let arg = it.next() {
            switch arg {
            case "--in":
                if let v = it.next() { cli.inPath = v }
            case "--out":
                if let v = it.next() { cli.outPath = v }
            case "--help", "-h":
                print("SwiftGen â€” generate Swift sources from spec/matrix.json")
                print("Usage: SwiftGen --in spec/matrix.json --out swift/Midi2Swift/Sources")
                exit(0)
            default:
                fputs("Unknown argument: \(arg)\n", stderr)
                exit(2)
            }
        }
        return cli
    }
}

let cli = CLI.parse()

// Load matrix JSON as dictionary for flexible access
let url = URL(fileURLWithPath: cli.inPath)
guard FileManager.default.fileExists(atPath: url.path) else {
    fputs("SwiftGen error: matrix not found at \(cli.inPath)\n", stderr)
    exit(2)
}
let data = try Data(contentsOf: url)
guard let matrix = try JSONSerialization.jsonObject(with: data) as? [String: Any] else {
    fputs("SwiftGen error: matrix is not a JSON object\n", stderr)
    exit(2)
}

// Extract meta.pdf_sha256 for provenance
let meta = matrix["meta"] as? [String: Any]
let pdfSHA = meta?["pdf_sha256"] as? [String: String] ?? [:]
let generatedAt = meta?["generated_at"] as? String ?? ""

// Extract catalog families if present
var families: [String] = []
if let catalog = matrix["catalog"] as? [String: Any],
   let ump = catalog["ump"] as? [String: Any],
   let fams = ump["families"] as? [String] {
    families = fams
}

// Helper: write a file
func write(_ relPath: String, contents: String) throws {
    let outURL = URL(fileURLWithPath: cli.outPath).appendingPathComponent(relPath)
    try FileManager.default.createDirectory(at: outURL.deletingLastPathComponent(), withIntermediateDirectories: true)
    try contents.data(using: .utf8)!.write(to: outURL, options: .atomic)
}

// Generate Core/Generated/Version.swift
let coreVersion = """/// Generated by SwiftGen on \(generatedAt)
/// PDF SHA-256 provenance:
/// \(pdfSHA.sorted { $0.key < $1.key }.map { " - \($0): \($1)" }.joined(separator: "\n/// "))
public enum Midi2SwiftBuild {
    public static let generatedAt: String = "\(generatedAt)"
    public static let pdfSHA256: [String:String] = [
        \(pdfSHA.sorted { $0.key < $1.key }.map { "\"\($0)\": \"\($1)\"" }.joined(separator: ",\n        "))
    ]
}
"""
try write("Core/Generated/Version.swift", contents: coreVersion)

// Generate UMP/Generated/Catalog.swift
let umpCatalog = """/// UMP catalog families (seeded; items populated in later PRs)
public enum UMPCatalogFamily: String, CaseIterable {
\(families.map { "    case \($0) = \"\($0)\"" }.joined(separator: "\n"))
}
"""
try write("UMP/Generated/Catalog.swift", contents: umpCatalog)

print("SwiftGen: generated Core/Generated/Version.swift and UMP/Generated/Catalog.swift")
